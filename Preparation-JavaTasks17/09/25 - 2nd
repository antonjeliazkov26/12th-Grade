import java.io.*;
import java.util.*;

abstract class ClubMember {
    protected String firstName;
    protected String lastName;
    protected int age;
    protected double salary;

    public ClubMember(String firstName, String lastName, int age, double salary) {
        if (firstName == null || firstName.trim().isEmpty() || lastName == null || lastName.trim().isEmpty()) {
            throw new IllegalArgumentException("The name canâ€™t be an empty string!");
        }
        if (age <= 17) {
            throw new IllegalArgumentException("Age must be greater than 17 years!");
        }
        if (salary <= 0) {
            throw new IllegalArgumentException("Salary must be a positive number!");
        }
        this.firstName = firstName;
        this.lastName = lastName;
        this.age = age;
        this.salary = salary;
    }

    public abstract void info();

    public int getAge() {
        return age;
    }

    public double getSalary() {
        return salary;
    }

    public String getFullName() {
        return firstName + " " + lastName;
    }
}

class Director extends ClubMember {
    private String directorType;

    public Director(String firstName, String lastName, int age, double salary, String directorType) {
        super(firstName, lastName, age, salary);
        this.directorType = directorType;
    }

    @Override
    public void info() {
        System.out.println(directorType + " director: " + firstName + " " + lastName);
        System.out.printf("salary: %.2f euro%n", salary);
        System.out.println("age: " + age + " years");
    }
}

class Coach extends ClubMember {
    private String coachType;
    private int contractLength;

    public Coach(String firstName, String lastName, int age, double salary, String coachType, int contractLength) {
        super(firstName, lastName, age, salary);
        this.coachType = coachType;
        this.contractLength = contractLength;
    }

    @Override
    public void info() {
        System.out.println(coachType + " coach: " + firstName + " " + lastName);
        System.out.printf("salary: %.2f lv%n", salary);
        System.out.println("age: " + age + " years");
    }
}

class FootballPlayer extends ClubMember {
    private String position;
    private int contractLength;
    private int matches;
    private int goals;
    private int assists;

    public FootballPlayer(String firstName, String lastName, int age, double salary,
                          String position, int contractLength, int matches, int goals, int assists) {
        super(firstName, lastName, age, salary);
        this.position = position;
        this.contractLength = contractLength;
        this.matches = matches;
        this.goals = goals;
        this.assists = assists;
    }

    @Override
    public void info() {
        System.out.println(firstName + " " + lastName + " - " + position);
        System.out.printf("salary: %.2f lv%n", salary);
        System.out.println("age: " + age + " years");
        System.out.println(goals + " goals and " + assists + " assists in " + matches + " matches");
    }

    public int getGoals() {
        return goals;
    }
}

public class FootballClub {
    public static void main(String[] args) {
        List<ClubMember> members = new ArrayList<>();
        FootballPlayer topScorer = null;
        ClubMember highestSalary = null;

        try (BufferedReader br = new BufferedReader(new FileReader("input.txt"))) {
            String line;
            while ((line = br.readLine()) != null) {
                try {
                    String[] parts = line.split("\\s+");
                    String type = parts[0];

                    if (type.equalsIgnoreCase("player")) {
                        String firstName = parts[1];
                        String lastName = parts[2];
                        int age = Integer.parseInt(parts[3]);
                        double salary = Double.parseDouble(parts[4]);
                        String position = parts[5];
                        int contractLength = Integer.parseInt(parts[6]);
                        int matches = Integer.parseInt(parts[7]);
                        int goals = Integer.parseInt(parts[8]);
                        int assists = Integer.parseInt(parts[9]);
                        FootballPlayer player = new FootballPlayer(firstName, lastName, age, salary, position, contractLength, matches, goals, assists);
                        members.add(player);
                        if (topScorer == null || player.getGoals() > topScorer.getGoals()) {
                            topScorer = player;
                        }
                        if (highestSalary == null || player.getSalary() > highestSalary.getSalary()) {
                            highestSalary = player;
                        }
                    } else if (type.equalsIgnoreCase("coach")) {
                        String firstName = parts[1];
                        String lastName = parts[2];
                        int age = Integer.parseInt(parts[3]);
                        double salary = Double.parseDouble(parts[4]);
                        String coachType = parts[5];
                        int contractLength = Integer.parseInt(parts[6]);
                        Coach coach = new Coach(firstName, lastName, age, salary, coachType, contractLength);
                        members.add(coach);
                        if (highestSalary == null || coach.getSalary() > highestSalary.getSalary()) {
                            highestSalary = coach;
                        }
                    } else if (type.equalsIgnoreCase("director")) {
                        String firstName = parts[1];
                        String lastName = parts[2];
                        int age = Integer.parseInt(parts[3]);
                        double salary = Double.parseDouble(parts[4]);
                        String directorType = parts[5];
                        Director director = new Director(firstName, lastName, age, salary, directorType);
                        members.add(director);
                        if (highestSalary == null || director.getSalary() > highestSalary.getSalary()) {
                            highestSalary = director;
                        }
                    }
                } catch (Exception e) {
                    System.out.println("Error reading member: " + e.getMessage());
                }
            }
        } catch (IOException e) {
            System.out.println("File not found.");
            return;
        }

        members.sort(Comparator.comparingInt(ClubMember::getAge));

        for (int i = 0; i < members.size(); i++) {
            members.get(i).info();
            if (i < members.size() - 1) {
                System.out.println("********************");
            }
        }

        if (highestSalary != null) {
            System.out.printf("The person with the highest salary in the club is %s with %.2f lv salary.%n",
                    highestSalary.getFullName(), highestSalary.getSalary());
        }
        if (topScorer != null) {
            System.out.printf("The team's top scorer is %s with %d goals.%n",
                    topScorer.getFullName(), topScorer.getGoals());
        }
    }
}
