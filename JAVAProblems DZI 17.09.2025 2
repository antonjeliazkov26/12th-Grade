
Anton Jeliazkov <a.jeliazkov26@acsbg.org>
9:20â€¯AM (0 minutes ago)
to me

import java.io.*;
import java.util.*;

abstract class HospitalStaff {
protected String firstName;
protected String lastName;
protected int age;
protected double salary;

public HospitalStaff(String firstName, String lastName, int age, double salary) {
if (age <= 0) throw new IllegalArgumentException("Age must be a positive number.");
if (salary <= 0) throw new IllegalArgumentException("Salary must be a positive number!");
this.firstName = firstName;
this.lastName = lastName;
this.age = age;
this.salary = salary;
}

public double getSalary() { return salary; }
public int getAge() { return age; }
public abstract String info();
}

class Doctor extends HospitalStaff {
private String specialization;
private int patientsTreated;

public Doctor(String firstName, String lastName, int age, double salary, String specialization, int patientsTreated) {
super(firstName, lastName, age, salary);
this.specialization = specialization;
this.patientsTreated = patientsTreated;
}

public int getPatientsTreated() { return patientsTreated; }

@Override
public String info() {
return String.format("Doctor: %s %s - %s\nSalary: %.2f lv.\nAge: %d\nPatients treated: %d",
firstName, lastName, specialization, salary, age, patientsTreated);
}
}

class Nurse extends HospitalStaff {
private String department;
private int shiftsWorked;

public Nurse(String firstName, String lastName, int age, double salary, String department, int shiftsWorked) {
super(firstName, lastName, age, salary);
this.department = department;
this.shiftsWorked = shiftsWorked;
}

public int getShiftsWorked() { return shiftsWorked; }

@Override
public String info() {
return String.format("Nurse: %s %s - %s\nSalary: %.2f lv.\nAge: %d\nShifts worked: %d",
firstName, lastName, department, salary, age, shiftsWorked);
}
}

class Janitor extends HospitalStaff {
private int areaCovered;

public Janitor(String firstName, String lastName, int age, double salary, int areaCovered) {
super(firstName, lastName, age, salary);
this.areaCovered = areaCovered;
}

public int getAreaCovered() { return areaCovered; }

@Override
public String info() {
return String.format("Janitor: %s %s\nSalary: %.2f lv.\nAge: %d\nArea covered: %d sqm",
firstName, lastName, salary, age, areaCovered);
}
}

public class Zad28 {
public static void main(String[] args) {
List<HospitalStaff> staff = new ArrayList<>();
try (BufferedReader br = new BufferedReader(new FileReader("input.txt"))) {
String line;
while ((line = br.readLine()) != null) {
String[] parts = line.split(",\\s*");
String type = parts[0];
if (type.equals("Doctor")) {
staff.add(new Doctor(parts[1], parts[2], Integer.parseInt(parts[3]),
Double.parseDouble(parts[4]), parts[5], Integer.parseInt(parts[6])));
} else if (type.equals("Nurse")) {
staff.add(new Nurse(parts[1], parts[2], Integer.parseInt(parts[3]),
Double.parseDouble(parts[4]), parts[5], Integer.parseInt(parts[6])));
} else if (type.equals("Janitor")) {
staff.add(new Janitor(parts[1], parts[2], Integer.parseInt(parts[3]),
Double.parseDouble(parts[4]), Integer.parseInt(parts[5])));
}
}
} catch (Exception e) {
e.printStackTrace();
}

System.out.println("Employees sorted by age:");
staff.stream().sorted(Comparator.comparingInt(HospitalStaff::getAge))
.forEach(s -> System.out.println(s.info() + "\n"));

System.out.println("Employee with the highest salary:");
staff.stream().max(Comparator.comparingDouble(HospitalStaff::getSalary))
.ifPresent(s -> System.out.println(s.info() + "\n"));

System.out.println("Doctor with most patients treated:");
staff.stream().filter(s -> s instanceof Doctor)
.map(s -> (Doctor) s)
.max(Comparator.comparingInt(Doctor::getPatientsTreated))
.ifPresent(s -> System.out.println(s.info() + "\n"));

System.out.println("Most hardworking employee (Nurse or Janitor):");
Nurse hardworkingNurse = staff.stream().filter(s -> s instanceof Nurse)
.map(s -> (Nurse) s)
.max(Comparator.comparingInt(Nurse::getShiftsWorked)).orElse(null);
Janitor hardworkingJanitor = staff.stream().filter(s -> s instanceof Janitor)
.map(s -> (Janitor) s)
.max(Comparator.comparingInt(Janitor::getAreaCovered)).orElse(null);

if (hardworkingNurse != null && (hardworkingJanitor == null || hardworkingNurse.getShiftsWorked() >= hardworkingJanitor.getAreaCovered())) {
System.out.println(hardworkingNurse.info() + "\n");
} else if (hardworkingJanitor != null) {
System.out.println(hardworkingJanitor.info() + "\n");
}
}
}
